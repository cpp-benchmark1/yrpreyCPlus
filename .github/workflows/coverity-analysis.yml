name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ libsqlite3-dev libcurl4-openssl-dev
      - name: Download and Install Coverity Tool
        run: |
          curl -L --output coverity_tool.tgz --form "token=${{ secrets.COVERITY_TOKEN }}" --form "project=${{ github.repository }}" https://scan.coverity.com/download/linux64
          tar -xzf coverity_tool.tgz
          export PATH="$PWD/cov-analysis-linux64-*/bin:$PATH"
      - name: Build with Coverity
        run: |
          ./cov-analysis-linux64-*/bin/cov-build --dir cov-int bash -c '
            find . -name "*.cpp" -print0 | while IFS= read -r -d "" file; do
              g++ "$file" -o "${file}.out" -lsqlite3 -lcurl
            done
          '
      - name: List all .cpp files
        run: find . -name '*.cpp'
      - name: List files in workspace
        run: ls -l
      - name: List cov-int directory
        run: ls -l cov-int || echo "cov-int not found"
      - name: List Coverity directory
        run: ls -l
      - name: List Coverity bin directory
        run: ls -l cov-analysis-linux64-*/bin
      - name: Compress with bzip2
        run: |
          tar -cjf myproject.tar.bz2 cov-int
        id: compress
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false
      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2
      - name: Notify Coverity Scan
        run: |
          curl -X POST https://scan.coverity.com/builds \
            -F "project=${{ github.repository }}" \
            -F "token=${{ secrets.COVERITY_TOKEN }}" \
            -F "email=cpp.benchmark@proton.me" \
            -F "url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2" \
            -F "version=1.0" \
            -F "description=Automated Coverity Scan"
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install MongoDB C++ driver
        run: |
          ./vcpkg/vcpkg install mongo-cxx-driver
      - name: Check cov-build version
        run: ./cov-analysis-linux64-*/bin/cov-build --version