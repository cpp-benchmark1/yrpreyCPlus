name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"

jobs:
  coverity:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ libsqlite3-dev libcurl4-openssl-dev build-essential cmake

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install MongoDB C++ driver
        run: |
          ./vcpkg/vcpkg install mongo-cxx-driver

      - name: Download and Install Coverity Tool
        run: |
          curl -L --output coverity_tool.tgz --form "token=${{ secrets.COVERITY_TOKEN }}" --form "project=${{ github.repository }}" https://scan.coverity.com/download/linux64
          tar -xzf coverity_tool.tgz
          export PATH="$PWD/cov-analysis-linux64-*/bin:$PATH"

      - name: List all .cpp files to be analyzed
        run: |
          echo "Files that will be analyzed:"
          find . -name "*.cpp" -not -path "./cov-analysis-linux64-*/*" -not -path "./vcpkg/*"

      - name: Build with Coverity
        run: |
          export CMAKE_TOOLCHAIN_FILE=$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake
          export VCPKG_ROOT=$PWD/vcpkg
          
          ./cov-analysis-linux64-*/bin/cov-build --dir cov-int bash -c '
            # Set include paths for MongoDB driver
            MONGO_INCLUDE="-I$PWD/vcpkg/installed/x64-linux/include"
            MONGO_LIB="-L$PWD/vcpkg/installed/x64-linux/lib -lbsoncxx -lmongocxx"
            
            find . -name "*.cpp" -not -path "./cov-analysis-linux64-*/*" -not -path "./vcpkg/*" -print0 | while IFS= read -r -d "" file; do
              echo "Processing: $file"
              
              # Skip Windows-specific files on Linux
              if [[ "$file" == *"bufferOverflow.cpp"* ]] || grep -q "windows.h" "$file" 2>/dev/null; then
                echo "  -> Skipping Windows-specific file: $file"
                continue
              fi
              
              # Compile with appropriate libraries based on file content
              if grep -q "bsoncxx\|mongocxx" "$file" 2>/dev/null; then
                echo "  -> Compiling MongoDB file with MongoDB libraries"
                g++ "$file" -o "${file}.out" $MONGO_INCLUDE $MONGO_LIB -lsqlite3 -lcurl -std=c++17 2>/dev/null || {
                  echo "  -> Failed to compile MongoDB file: $file"
                  continue
                }
              else
                echo "  -> Compiling standard C++ file"
                g++ "$file" -o "${file}.out" -lsqlite3 -lcurl -std=c++17 2>/dev/null || {
                  echo "  -> Failed to compile: $file"
                  continue
                }
              fi
              
              echo "  -> Successfully compiled: $file"
            done
            
            echo "Build process completed"
          '

      - name: Verify Coverity analysis
        run: |
          echo "Checking cov-int directory:"
          ls -la cov-int/ || echo "cov-int directory not found"
          
          echo "Checking for analysis results:"
          if [ -f "cov-int/build-log.txt" ]; then
            echo "Build log exists, showing last 50 lines:"
            tail -50 cov-int/build-log.txt
          else
            echo "Build log not found"
          fi

      - name: List files in workspace
        run: |
          echo "Workspace contents:"
          ls -la
          echo "Generated executables:"
          find . -name "*.out" -type f 2>/dev/null || echo "No .out files found"

      - name: Compress results with bzip2
        run: |
          if [ -d "cov-int" ] && [ "$(ls -A cov-int)" ]; then
            echo "Compressing Coverity results..."
            tar -cjf myproject.tar.bz2 cov-int
            echo "Compression completed. File size:"
            ls -lh myproject.tar.bz2
          else
            echo "Error: cov-int directory is empty or doesn't exist"
            exit 1
          fi
        id: compress

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results - ${{ github.run_id }}"
          body: |
            Automated Coverity Scan Results
            
            **Run Details:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Trigger: ${{ github.event_name }}
            - Run ID: ${{ github.run_id }}
            
            This release contains the Coverity Scan analysis results for static code analysis.
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        run: |
          echo "Submitting results to Coverity Scan service..."
          curl -X POST https://scan.coverity.com/builds \
            -F "project=${{ github.repository }}" \
            -F "token=${{ secrets.COVERITY_TOKEN }}" \
            -F "email=cpp.benchmark@proton.me" \
            -F "url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2" \
            -F "version=${{ github.sha }}" \
            -F "description=Automated Coverity Scan - Run ${{ github.run_id }}" || {
              echo "Failed to submit to Coverity Scan service"
              exit 1
            }
          echo "Successfully submitted to Coverity Scan service"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f coverity_tool.tgz
          rm -f *.out 2>/dev/null || true
          echo "Cleanup completed"
